  --------------------- librasterlite ------------------------

PLEASE read the following information.

1 - Installation
2 - Required dependencies
3 - Build notes
  3.1: Building on Linux
  3.2: Building on MacOsX
  3.3: Building on Windows
    3.3.1: using MinGW / MSYS
    3.3.2: using Visual Studio .NET
  
=====================================================================

1 - Installation:
=================

The default destination path prefix for installed files is /usr/local.
Results from the installation script will be placed into subdirectories
include and lib.  If this default path prefix is proper, then execute:

    ./configure

If another path prefix is required, then execute:

    ./configure --prefix=/my/path

In either case, the directory of the prefix path must exist and be
writeable by the installer.

After executing configure, execute:

    make
    make install

Or even better, you can *strip* any executable binary, in order
to eliminate any debugging symbol, and thus widely reducing
their size:

    make install-strip

2- Required dependencies:
=========================
    
The external dependencies needed in order to build 'librasterlite'
are the followings:

libtiff	
--------------
a library required in order to access TIFF images
download site: http://www.libtiff.org

libgeotiff
--------------
a library supporting GeoTIFF	
download site: http://trac.osgeo.org/geotiff

libjpeg
--------------
a library required in order to access JPEG images
download site: http://www.ijg.org

zlib
--------------
a library supporting DEFLATE (zip) compression
download site: http://www.zlib.net

libpng
--------------
a library supporting PNG images
download site: http://www.libpng.org/pub/png/libpng.html

libspatialite / libproj
-----------------------
please refer to the 'libspatialite' documentation.

3 - Build notes
===============

3.1: Building on Linux
----------------------

Building 'librasterlite' under Linux does not require any special 
setting; we'll assume you have unpacked the sources as 
./librasterlite-1.0

# cd librasterlite-1.0
# ./configure
# make
# sudo make install
#     or (in order to save some disk space)
# sudo make install-strip

IMPORTANT NOTICE:
the above builds a dynamically-linked version of the tools (i.e. rasterlite_load, 
rasterlite_pyramids and so on, depends on several shared libraries at run time).
If you want to get a statically-linked version of the tools (i.e. not
requiring any external dependencies), you simply have now to type:

# mkdir static_bin
# make -f Makefile-static-Linux

and you'll get all statically-linked tools built into the ./static_bin dir.

3.2: Building on MacOsX
-----------------------

Building 'librasterlite' on MacOsX is mainly the same as for 
Linux.
We'll assume you have unpacked the sources as 
./librasterlite-1.0

# cd librasterlite-1.0
# ./configure
# make
# sudo make install
#     or (in order to save some disk space)
# sudo make install-strip

IMPORTANT NOTICE: this will build an executable for your
specific platform. i.e. when building on a PPC Mac,
resulting binary will be targeted to run on PPC.
And when building on Intel Mac, resulting binary will
run on Intel target.

IMPORTANT NOTICE:
the above builds a dynamically-linked version of the tools (i.e. rasterlite_load, 
rasterlite_pyramids and so on, depends on several shared libraries at run time).
If you want to get a statically-linked version of the tools (i.e. not
requiring any external dependencies), you simply have now to type:

# mkdir static_bin
# make -f Makefile-static-MacOsX

and you'll get all statically-linked tools built into the ./static_bin dir.

3.3: building on Windows
------------------------

On Windows systems you can choose between two different compilers:
- MinGW / MSYS
  this represents a smart porting of a minimal Linux-like
  devel-toolkit
- Microsoft Visual Studio .NET
  this one is the standard platform devel-toolkit

3.3.1: using MinGW / MSYS
-------------------------

We assume you have already installed the MinGW compiler and the MSYS shell.
Building 'librasterlite' under Windows is then more or less like building
on any other UNIX-like system.
We'll assume you have unpacked the sources as 
C:\librasterlite-1.0

$ cd c:/librasterlite-1.0
$ export "CFLAGS=-I/usr/local/include"
$ export "LDFLAGS=-L/usr/local/lib"
$ ./configure
$ make
$ make install-strip
$     or (in order to save some disk space)
$ make install-strip

IMPORTANT NOTICE:
the above builds a dynamically-linked version of the tools (i.e. rasterlite_load, 
rasterlite_pyramids and so on, depends on several DLLs at run time).
If you want to get a statically-linked version of the tools (i.e. not
requiring any external dependencies), you simply have now to type:

$ mkdir static_bin
$ make -f Makefile-static-MinGW

and you'll get all statically-linked tools built into the ./static_bin dir.

3.3.2: using Microsoft Visual Studio .NET
-----------------------------------------

We assume you have already installed Visual Studio enabling the command line
tools [you are expected to use the command prompt shell].

We'll assume you have unpacked the sources as
C:\librasterlite-1.0

> cd c:\librasterlite-1.0
> nmake /f makefile.vc
> nmake /f makefile.vc install

Important notice: you can install any depending library [libtiff, jpeg ..]
using the OSGeo4W installer: http://trac.osgeo.org/osgeo4w/

